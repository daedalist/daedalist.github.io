{"version":3,"sources":["ghost.js","observation_list.js","candidate_list.js","index.js"],"names":["evidence","GHOST_ORB","SPIRIT_BOX","FINGERPRINTS","EMF_5","FREEZING","GHOST_WRITING","DOTS_PROJECTOR","Ghost","evidences","this","props","evidence_list","map","e","className","name","React","Component","evidence_state","ResetButton","onClick","EvidenceButton","classNames","state","ObservationList","renderEvidenceButton","value","evidence_name","handleEvidenceClick","observed_evidence","Array","from","entries","handleResetClick","CandidateList","renderGhostEntry","candidate_scores","ghosts","Map","ghost_name","set","ghost_data_map","total_ghost_count","Object","keys","length","get_visible_ghosts","size","Header","Ghostbook","values","forEach","k","clicked_evidence","current_status","get","score","status","includes","possible_evidence","Set","v","add","ev","st","has","setState","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30014b86.chunk.js","sourcesContent":["import React from 'react';\n\nexport const evidence = {\n    GHOST_ORB: 'Ghost orb',\n    SPIRIT_BOX: 'Spirit box',\n    FINGERPRINTS: 'Fingerprints',\n    EMF_5: 'EMF Level 5',\n    FREEZING: 'Freezing temperatures',\n    GHOST_WRITING: 'Ghost writing',\n    DOTS_PROJECTOR: 'D.O.T.S projector',\n}\n\nclass Ghost extends React.Component {\n    render() {\n        const evidences = this.props.evidence_list.map(\n            (e) => {\n                return (<li key={e}>{e}</li>);\n            }\n        );\n        return (\n            <div className=\"ghost\">\n                <div className=\"name\">{this.props.name}</div>\n                <ul className=\"evidenceList\">\n                    {evidences}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Ghost;","import React from 'react';\n\nexport const evidence_state = {\n    SELECTED: 'evidenceSelected',\n    NOT_SELECTED: 'evidenceNotSelected',\n    DISABLED: 'evidenceDisabled',\n    RULED_OUT: 'evidenceRuledOut'\n}\n\nfunction ResetButton(props) {\n    const classNames = \"button resetButton\"\n    return (<div className={classNames} onClick={props.onClick}>Reset</div>)\n}\n\nfunction EvidenceButton(props) {\n    const classNames = \"evidenceButton button \" + props.state;\n    return (\n        <li className={classNames} onClick={props.onClick}>\n            {props.name}\n        </li>\n    )\n}\n\nclass ObservationList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            observed_evidence: props.observed_evidence,\n        }\n    }\n\n    renderEvidenceButton = (value) => {\n        const evidence_name = value[0];\n        const evidence_state = value[1];\n        return (\n            <EvidenceButton\n                name={evidence_name}\n                state={evidence_state}\n                onClick={() => this.props.handleEvidenceClick(evidence_name)}\n                key={evidence_name}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <section className=\"observations\">\n                <h1>My observations</h1>\n                <ul className=\"observationList\">\n                    {Array.from(this.state.observed_evidence.entries())\n                        .map(this.renderEvidenceButton)}\n                </ul>\n                <ResetButton\n                    onClick={() => this.props.handleResetClick()}\n                />\n            </section>\n        );\n    }\n}\n\nexport default ObservationList;","import React from 'react';\n\nimport Ghost from './ghost';\nimport ghost_data_map from './ghost_data_map.json';\n\nclass CandidateList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            candidate_scores: props.candidate_scores\n        }\n    }\n\n    renderGhostEntry = (value) => {\n        const name = value[0];\n        const evidence_list = value[1][\"evidence_list\"];\n        return (\n            <Ghost\n                name={name}\n                evidence_list={evidence_list}\n                key={name}\n            />\n        )\n    }\n\n    get_visible_ghosts() {\n        const ghosts = new Map();\n        for (const [ghost_name, score] of this.state.candidate_scores) {\n            if (score >= 0) {\n                ghosts.set(ghost_name,\n                    {\n                        \"evidence_list\":\n                            ghost_data_map[0][ghost_name][\"evidence_list\"],\n                        \"score\": 0\n                    }\n                )\n            }\n        }\n        return ghosts;\n    }\n\n    render() {\n        const total_ghost_count = Object.keys(ghost_data_map[0]).length;\n        if (this.get_visible_ghosts().size < total_ghost_count\n            && this.get_visible_ghosts().size > 0) {\n            return (\n                <section className=\"candidates\">\n                    <h1> Possible ghosts</h1>\n                    <div className=\"candidateList\">\n                        {Array.from(this.get_visible_ghosts().entries())\n                            .map(this.renderGhostEntry)}\n                    </div></section >\n\n            );\n        } else {\n            return (\n                <section className=\"candidates\">\n                    <h1> Possible ghosts</h1>\n                    <div className=\"candidateList\">\n                        <div>No ghosts match the selected evidence.</div>\n                    </div></section >\n\n            );\n        }\n    }\n\n}\n\nexport default CandidateList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { evidence } from './ghost';\nimport ghost_data_map from './ghost_data_map.json';\nimport ObservationList, { evidence_state } from './observation_list';\nimport CandidateList from './candidate_list';\n\nfunction Header(props) {\n    return (\n        <header>\n            <h1>Phasmophobia Ghostbook</h1>\n        </header >\n    );\n}\n\nclass Ghostbook extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Initialize evidence.\n        const observed_evidence = new Map();\n        Object.values(evidence).forEach((e) => {\n            observed_evidence.set(\n                e, evidence_state.NOT_SELECTED);\n        });\n\n        // Initialize ghosts.\n        const candidate_scores = new Map();\n        Object.keys(ghost_data_map[0]).forEach(\n            (k) => candidate_scores.set(k, 0));\n\n        this.state = {\n            observed_evidence: observed_evidence,\n            candidate_scores: candidate_scores\n        };\n    }\n\n    handleEvidenceClick(clicked_evidence) {\n        // TODO: I don't know why I can't make this immutable with a new Map().\n        const observed_evidence = this.state.observed_evidence;\n        const current_status = observed_evidence.get(clicked_evidence);\n        const candidate_scores = this.state.candidate_scores;\n\n        // Change the status of the clicked evidence.\n        switch (current_status) {\n            case evidence_state.NOT_SELECTED:\n                observed_evidence.set(clicked_evidence,\n                    evidence_state.SELECTED);\n                break;\n\n            case evidence_state.SELECTED:\n                observed_evidence.set(clicked_evidence,\n                    evidence_state.RULED_OUT);\n                break;\n\n            case evidence_state.RULED_OUT:\n                observed_evidence.set(clicked_evidence,\n                    evidence_state.NOT_SELECTED)\n                break;\n\n            case evidence_state.DISABLED:\n                break; // User cannot directly change if it is disabled.\n            default:\n                break;\n        }\n\n        // Recalculate candidate scores.\n        // Score > 0: candidate is a possibility.\n        // Score = 0: no evidence either way.\n        // Score < 0: ruled out.\n        for (const ghost_name of candidate_scores.keys()) {\n            let score = 0;\n            const evidence_list =\n                Array.from(ghost_data_map[0][ghost_name]['evidence_list']);\n            for (const [evidence_name, status] of observed_evidence) {\n                if (status === evidence_state.SELECTED) {\n                    if (evidence_list.includes(evidence_name)) {\n                        score += 10;\n                    } else {\n                        score = -10;\n                        break;\n                    }\n                } else if (status === evidence_state.RULED_OUT) {\n                    if (evidence_list.includes(evidence_name)) {\n                        score = -10;\n                        break;\n                    }\n                }\n            }\n            candidate_scores.set(ghost_name, score);\n        }\n\n        // Disable evidence that can be ruled out.\n        const possible_evidence = new Set();\n        for (const [ghost_name, score] of candidate_scores.entries()) {\n            if (score >= 0) {\n                const evidence_list = Array.from(\n                    ghost_data_map[0][ghost_name]['evidence_list']);\n                evidence_list.forEach((v) => possible_evidence.add(v));\n            }\n        }\n        if (possible_evidence.size > 0) {\n            for (const [ev, st] of observed_evidence) {\n                if (!possible_evidence.has(ev)\n                    && st === evidence_state.NOT_SELECTED) {\n                    observed_evidence.set(ev, evidence_state.DISABLED);\n                } else if (possible_evidence.has(ev)\n                    && st === evidence_state.DISABLED) {\n                    observed_evidence.set(ev, evidence_state.NOT_SELECTED);\n                }\n            }\n        }\n\n        this.setState({\n            observed_evidence: observed_evidence,\n            candidate_scores: candidate_scores\n        });\n    }\n\n    handleResetClick() {\n        const observed_evidence = this.state.observed_evidence;\n        for (const key of observed_evidence.keys()) {\n            observed_evidence.set(key, evidence_state.NOT_SELECTED);\n        }\n\n        const candidate_scores = this.state.candidate_scores;\n        for (const key of candidate_scores.keys()) {\n            candidate_scores.set(key, 0);\n        }\n\n        this.setState({\n            observed_evidence: observed_evidence,\n            candidate_scores: candidate_scores\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"ghostBook\" >\n                <Header />\n                <section className=\"content\">\n                    <ObservationList\n                        observed_evidence={this.state.observed_evidence}\n                        handleEvidenceClick={e => this.handleEvidenceClick(e)}\n                        handleResetClick={() => this.handleResetClick()}\n                    />\n                    <CandidateList\n                        candidate_scores={this.state.candidate_scores}\n                    />\n                </section>\n            </div >\n        );\n    }\n}\n\n// === Run the app ===\nReactDOM.render(\n    <Ghostbook />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}