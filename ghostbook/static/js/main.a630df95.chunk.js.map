{"version":3,"sources":["ghost.js","index.js"],"names":["evidence","GHOST_ORB","SPIRIT_BOX","FINGERPRINTS","EMF_5","FREEZING","GHOST_WRITING","Ghost","evidences","this","props","evidence_list","map","e","className","name","React","Component","evidence_state","Header","ResetButton","onClick","EvidenceButton","classNames","state","ObservationList","renderEvidenceButton","value","evidence_name","handleEvidenceClick","observed_evidence","Array","from","entries","handleResetClick","CandidateList","renderGhostEntry","candidate_scores","ghosts","Map","ghost_name","set","ghost_data_map","get_visible_ghosts","size","Ghostbook","Object","values","forEach","keys","k","clicked_evidence","current_status","get","score","includes","possible_evidence","Set","v","add","ev","st","has","setState","key","ReactDOM","render","document","getElementById"],"mappings":"yNAEaA,G,MAAW,CACpBC,UAAW,YACXC,WAAY,aACZC,aAAc,eACdC,MAAO,cACPC,SAAU,wBACVC,cAAe,kBAqBJC,E,uKAhBP,IAAMC,EAAYC,KAAKC,MAAMC,cAAcC,KACvC,SAACC,GACG,OAAQ,6BAAaA,GAAJA,MAGzB,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKA,UAAU,OAAf,SAAuBL,KAAKC,MAAMK,OAClC,oBAAID,UAAU,eAAd,SACKN,W,GAXDQ,IAAMC,W,OCJpBC,EACQ,mBADRA,EAEY,sBAFZA,EAGQ,mBAGd,SAASC,EAAOT,GACZ,OACI,iCACI,0DAKZ,SAASU,EAAYV,GAEjB,OAAQ,qBAAKI,UADM,qBACiBO,QAASX,EAAMW,QAA3C,mBAGZ,SAASC,EAAeZ,GACpB,IAAMa,EAAa,yBAA2Bb,EAAMc,MACpD,OACI,oBAAIV,UAAWS,EAAYF,QAASX,EAAMW,QAA1C,SACKX,EAAMK,O,IAKbU,E,kDACF,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAMVgB,qBAAuB,SAACC,GACpB,IAAMC,EAAgBD,EAAM,GACtBT,EAAiBS,EAAM,GAC7B,OACI,cAACL,EAAD,CACIP,KAAMa,EACNJ,MAAON,EACPG,QAAS,kBAAM,EAAKX,MAAMmB,oBAAoBD,KACzCA,IAbb,EAAKJ,MAAQ,CACTM,kBAAmBpB,EAAMoB,mBAHd,E,qDAoBT,IAAD,OACL,OACI,0BAAShB,UAAU,eAAnB,UACI,iDACA,oBAAIA,UAAU,kBAAd,SACKiB,MAAMC,KAAKvB,KAAKe,MAAMM,kBAAkBG,WACpCrB,IAAIH,KAAKiB,wBAElB,cAACN,EAAD,CACIC,QAAS,kBAAM,EAAKX,MAAMwB,6B,GA9BhBlB,IAAMC,WAqC9BkB,E,kDACF,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IAMV0B,iBAAmB,SAACT,GAChB,IAAMZ,EAAOY,EAAM,GACbhB,EAAgBgB,EAAM,GAAN,cACtB,OACI,cAAC,EAAD,CACIZ,KAAMA,EACNJ,cAAeA,GACVI,IAZb,EAAKS,MAAQ,CACTa,iBAAkB3B,EAAM2B,kBAHb,E,iEAoBf,IADiB,EACXC,EAAS,IAAIC,IADF,cAEiB9B,KAAKe,MAAMa,kBAF5B,IAEjB,2BAA+D,CAAC,IAAD,yBAAnDG,EAAmD,UAC/C,GACRF,EAAOG,IAAID,EACP,CACI,cACIE,EAAe,GAAGF,GAAlB,cACJ,MAAS,KARR,8BAajB,OAAOF,I,+BAIP,OAAI7B,KAAKkC,qBAAqBC,KAAO,EAE7B,0BAAS9B,UAAU,aAAnB,UACI,kDACA,qBAAKA,UAAU,gBAAf,SACKiB,MAAMC,KAAKvB,KAAKkC,qBAAqBV,WACjCrB,IAAIH,KAAK2B,uBAMtB,0BAAStB,UAAU,aAAnB,UACI,kDACA,qBAAKA,UAAU,gBAAf,SACI,kF,GApDIE,IAAMC,WA6D5B4B,E,kDACF,WAAYnC,GAAQ,IAAD,sBACf,cAAMA,GAGN,IAAMoB,EAAoB,IAAIS,IAC9BO,OAAOC,OAAO/C,GAAUgD,SAAQ,SAACnC,GAC7BiB,EAAkBW,IACd5B,EAAGK,MAIX,IAAMmB,EAAmB,IAAIE,IAXd,OAYfO,OAAOG,KAAKP,EAAe,IAAIM,SAC3B,SAACE,GAAD,OAAOb,EAAiBI,IAAIS,EAAG,MAEnC,EAAK1B,MAAQ,CACTM,kBAAmBA,EACnBO,iBAAkBA,GAjBP,E,gEAqBCc,GAEhB,IAAMrB,EAAoBrB,KAAKe,MAAMM,kBAC/BsB,EAAiBtB,EAAkBuB,IAAIF,GACvCd,EAAmB5B,KAAKe,MAAMa,iBAEpC,OAAQe,GACJ,KAAKlC,EACDY,EAAkBW,IAAIU,EAClBjC,GACJ,MAEJ,KAAKA,EACDY,EAAkBW,IAAIU,EAClBjC,GAdsB,oBAwBTmB,EAAiBY,QAxBR,IAwBlC,2BAAkD,CAAC,IAAD,EAAvCT,EAAuC,QAC1Cc,EAAQ,EACN3C,EACFoB,MAAMC,KAAKU,EAAe,GAAGF,GAAlB,eAH+B,cAIRV,GAJQ,IAI9C,2BAAyD,CAAC,IAAD,yBAA7CF,EAA6C,KACrD,GADqD,OACtCV,EAAyB,CACpC,IAAIP,EAAc4C,SAAS3B,GAEpB,CACH0B,EAAQ,EACR,MAHAA,GAAS,KAPyB,8BAc9CjB,EAAiBI,IAAID,EAAYc,IAtCH,8BA0ClC,IA1CkC,EA0C5BE,EAAoB,IAAIC,IA1CI,cA2CApB,EAAiBJ,WA3CjB,IA2ClC,2BAA8D,CAAC,IAAD,yBAAlDO,EAAkD,KAC1D,GAD0D,KAC9C,EACcT,MAAMC,KACxBU,EAAe,GAAGF,GAAlB,eACUQ,SAAQ,SAACU,GAAD,OAAOF,EAAkBG,IAAID,OA/CzB,8BAkDlC,GAAIF,EAAkBZ,KAAO,EAAG,CAAC,IAAD,gBACLd,GADK,IAC5B,2BAA0C,CAAC,IAAD,yBAA9B8B,EAA8B,KAA1BC,EAA0B,KACjCL,EAAkBM,IAAIF,IACpBC,IAAO3C,EAEHsC,EAAkBM,IAAIF,IAC1BC,IAAO3C,GACVY,EAAkBW,IAAImB,EAAI1C,GAH1BY,EAAkBW,IAAImB,EAAI1C,IAJN,+BAYhCT,KAAKsD,SAAS,CACVjC,kBAAmBA,EACnBO,iBAAkBA,M,yCAKtB,IADe,EACTP,EAAoBrB,KAAKe,MAAMM,kBADtB,cAEGA,EAAkBmB,QAFrB,IAEf,2BAA4C,CAAC,IAAlCe,EAAiC,QACxClC,EAAkBW,IAAIuB,EAAK9C,IAHhB,8BAMf,IANe,EAMTmB,EAAmB5B,KAAKe,MAAMa,iBANrB,cAOGA,EAAiBY,QAPpB,IAOf,2BAA2C,CAAC,IAAjCe,EAAgC,QACvC3B,EAAiBI,IAAIuB,EAAK,IARf,8BAWfvD,KAAKsD,SAAS,CACVjC,kBAAmBA,EACnBO,iBAAkBA,M,+BAIhB,IAAD,OACL,OACI,sBAAKvB,UAAU,YAAf,UACI,cAACK,EAAD,IACA,0BAASL,UAAU,UAAnB,UACI,cAAC,EAAD,CACIgB,kBAAmBrB,KAAKe,MAAMM,kBAC9BD,oBAAqB,SAAAhB,GAAC,OAAI,EAAKgB,oBAAoBhB,IACnDqB,iBAAkB,kBAAM,EAAKA,sBAEjC,cAAC,EAAD,CACIG,iBAAkB5B,KAAKe,MAAMa,6B,GAtH7BrB,IAAMC,WA+H9BgD,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.a630df95.chunk.js","sourcesContent":["import React from 'react';\n\nexport const evidence = {\n    GHOST_ORB: 'Ghost orb',\n    SPIRIT_BOX: 'Spirit box',\n    FINGERPRINTS: 'Fingerprints',\n    EMF_5: 'EMF Level 5',\n    FREEZING: 'Freezing temperatures',\n    GHOST_WRITING: 'Ghost writing',\n}\n\nclass Ghost extends React.Component {\n    render() {\n        const evidences = this.props.evidence_list.map(\n            (e) => {\n                return (<li key={e}>{e}</li>);\n            }\n        );\n        return (\n            <div className=\"ghost\">\n                <div className=\"name\">{this.props.name}</div>\n                <ul className=\"evidenceList\">\n                    {evidences}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Ghost;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Ghost, { evidence } from './ghost';\nimport ghost_data_map from './ghost_data_map.json';\n\nconst evidence_state = {\n    SELECTED: 'evidenceSelected',\n    NOT_SELECTED: 'evidenceNotSelected',\n    DISABLED: 'evidenceDisabled'\n}\n\nfunction Header(props) {\n    return (\n        <header>\n            <h1>Phasmophobia Ghostbook</h1>\n        </header >\n    );\n}\n\nfunction ResetButton(props) {\n    const classNames = \"button resetButton\"\n    return (<div className={classNames} onClick={props.onClick}>Reset</div>)\n}\n\nfunction EvidenceButton(props) {\n    const classNames = \"evidenceButton button \" + props.state;\n    return (\n        <li className={classNames} onClick={props.onClick}>\n            {props.name}\n        </li>\n    )\n}\n\nclass ObservationList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            observed_evidence: props.observed_evidence,\n        }\n    }\n\n    renderEvidenceButton = (value) => {\n        const evidence_name = value[0];\n        const evidence_state = value[1];\n        return (\n            <EvidenceButton\n                name={evidence_name}\n                state={evidence_state}\n                onClick={() => this.props.handleEvidenceClick(evidence_name)}\n                key={evidence_name}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <section className=\"observations\">\n                <h1>My observations</h1>\n                <ul className=\"observationList\">\n                    {Array.from(this.state.observed_evidence.entries())\n                        .map(this.renderEvidenceButton)}\n                </ul>\n                <ResetButton\n                    onClick={() => this.props.handleResetClick()}\n                />\n            </section>\n        );\n    }\n}\n\nclass CandidateList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            candidate_scores: props.candidate_scores\n        }\n    }\n\n    renderGhostEntry = (value) => {\n        const name = value[0];\n        const evidence_list = value[1][\"evidence_list\"];\n        return (\n            <Ghost\n                name={name}\n                evidence_list={evidence_list}\n                key={name}\n            />\n        )\n    }\n\n    get_visible_ghosts() {\n        const ghosts = new Map();\n        for (const [ghost_name, score] of this.state.candidate_scores) {\n            if (score > 0) {\n                ghosts.set(ghost_name,\n                    {\n                        \"evidence_list\":\n                            ghost_data_map[0][ghost_name][\"evidence_list\"],\n                        \"score\": 0\n                    }\n                )\n            }\n        }\n        return ghosts;\n    }\n\n    render() {\n        if (this.get_visible_ghosts().size > 0) {\n            return (\n                <section className=\"candidates\">\n                    <h1> Possible ghosts</h1>\n                    <div className=\"candidateList\">\n                        {Array.from(this.get_visible_ghosts().entries())\n                            .map(this.renderGhostEntry)}\n                    </div></section >\n\n            );\n        } else {\n            return (\n                <section className=\"candidates\">\n                    <h1> Possible ghosts</h1>\n                    <div className=\"candidateList\">\n                        <div>No ghosts match the selected evidence.</div>\n                    </div></section >\n\n            );\n        }\n    }\n\n}\n\nclass Ghostbook extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Initialize evidence.\n        const observed_evidence = new Map();\n        Object.values(evidence).forEach((e) => {\n            observed_evidence.set(\n                e, evidence_state.NOT_SELECTED);\n        });\n\n        // Initialize ghosts.\n        const candidate_scores = new Map();\n        Object.keys(ghost_data_map[0]).forEach(\n            (k) => candidate_scores.set(k, 0));\n\n        this.state = {\n            observed_evidence: observed_evidence,\n            candidate_scores: candidate_scores\n        };\n    }\n\n    handleEvidenceClick(clicked_evidence) {\n        // TODO: I don't know why I can't make this immutable with a new Map().\n        const observed_evidence = this.state.observed_evidence;\n        const current_status = observed_evidence.get(clicked_evidence);\n        const candidate_scores = this.state.candidate_scores;\n\n        switch (current_status) {\n            case evidence_state.NOT_SELECTED:\n                observed_evidence.set(clicked_evidence,\n                    evidence_state.SELECTED);\n                break;\n\n            case evidence_state.SELECTED:\n                observed_evidence.set(clicked_evidence,\n                    evidence_state.NOT_SELECTED);\n                break;\n\n            case evidence_state.DISABLED:\n                break; // User cannot directly change if it is disabled.\n            default:\n                break;\n        }\n\n        // Recalculate candidate scores.\n        for (const ghost_name of candidate_scores.keys()) {\n            let score = 0;\n            const evidence_list =\n                Array.from(ghost_data_map[0][ghost_name]['evidence_list']);\n            for (const [evidence_name, status] of observed_evidence) {\n                if (status === evidence_state.SELECTED) {\n                    if (evidence_list.includes(evidence_name)) {\n                        score += 10;\n                    } else {\n                        score = 0;\n                        break;\n                    }\n                }\n            }\n            candidate_scores.set(ghost_name, score);\n        }\n\n        // Disable evidence that can be ruled out.\n        const possible_evidence = new Set();\n        for (const [ghost_name, score] of candidate_scores.entries()) {\n            if (score > 0) {\n                const evidence_list = Array.from(\n                    ghost_data_map[0][ghost_name]['evidence_list']);\n                evidence_list.forEach((v) => possible_evidence.add(v));\n            }\n        }\n        if (possible_evidence.size > 0) {\n            for (const [ev, st] of observed_evidence) {\n                if (!possible_evidence.has(ev)\n                    && st === evidence_state.NOT_SELECTED) {\n                    observed_evidence.set(ev, evidence_state.DISABLED);\n                } else if (possible_evidence.has(ev)\n                    && st === evidence_state.DISABLED) {\n                    observed_evidence.set(ev, evidence_state.NOT_SELECTED);\n                }\n            }\n        }\n\n        this.setState({\n            observed_evidence: observed_evidence,\n            candidate_scores: candidate_scores\n        });\n    }\n\n    handleResetClick() {\n        const observed_evidence = this.state.observed_evidence;\n        for (const key of observed_evidence.keys()) {\n            observed_evidence.set(key, evidence_state.NOT_SELECTED);\n        }\n\n        const candidate_scores = this.state.candidate_scores;\n        for (const key of candidate_scores.keys()) {\n            candidate_scores.set(key, 0);\n        }\n\n        this.setState({\n            observed_evidence: observed_evidence,\n            candidate_scores: candidate_scores\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"ghostBook\" >\n                <Header />\n                <section className=\"content\">\n                    <ObservationList\n                        observed_evidence={this.state.observed_evidence}\n                        handleEvidenceClick={e => this.handleEvidenceClick(e)}\n                        handleResetClick={() => this.handleResetClick()}\n                    />\n                    <CandidateList\n                        candidate_scores={this.state.candidate_scores}\n                    />\n                </section>\n            </div >\n        );\n    }\n}\n\n// === Run the app ===\nReactDOM.render(\n    <Ghostbook />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}