{"version":3,"sources":["ghost.js","index.js"],"names":["evidence","GHOST_ORB","SPIRIT_BOX","FINGERPRINTS","EMF_5","FREEZING","GHOST_WRITING","Ghost","evidences","this","props","evidence_list","map","e","className","name","React","Component","evidence_state","Header","EvidenceButton","classNames","state","onClick","ObservationList","renderEvidenceButton","value","evidence_name","handleEvidenceClick","observed_evidence","Array","from","entries","CandidateList","renderGhostEntry","candidate_scores","ghosts","Map","ghost_name","set","ghost_data_map","get_visible_ghosts","size","Ghostbook","Object","values","forEach","keys","k","clicked_evidence","current_status","get","score","includes","setState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.878ce9b4.chunk.js","sourcesContent":["import React from 'react';\n\nexport const evidence = {\n    GHOST_ORB: 'Ghost orb',\n    SPIRIT_BOX: 'Spirit box',\n    FINGERPRINTS: 'Fingerprints',\n    EMF_5: 'EMF Level 5',\n    FREEZING: 'Freezing temperatures',\n    GHOST_WRITING: 'Ghost writing',\n}\n\nclass Ghost extends React.Component {\n    render() {\n        const evidences = this.props.evidence_list.map(\n            (e) => {\n                return (<li key={e}>{e}</li>);\n            }\n        );\n        return (\n            <div className=\"ghost\">\n                <div className=\"name\">{this.props.name}</div>\n                <ul className=\"evidenceList\">\n                    {evidences}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Ghost;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Ghost, { evidence } from './ghost';\nimport ghost_data_map from './ghost_data_map.json';\n\nconst evidence_state = {\n    SELECTED: 'evidenceSelected',\n    NOT_SELECTED: 'evidenceNotSelected',\n    DISABLED: 'evidenceDisabled'\n}\n\nfunction Header(props) {\n    return (\n        <header>\n            <h1>Phasmophobia Ghostbook</h1>\n        </header >\n    );\n}\n\nfunction EvidenceButton(props) {\n    const classNames = \"evidenceButton \" + props.state;\n    return (\n        <li className={classNames} onClick={props.onClick}>\n            {props.name}\n        </li>\n    )\n}\n\nclass ObservationList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            observed_evidence: props.observed_evidence,\n        }\n    }\n\n    renderEvidenceButton = (value) => {\n        const evidence_name = value[0];\n        const evidence_state = value[1];\n        return (\n            <EvidenceButton\n                name={evidence_name}\n                state={evidence_state}\n                onClick={() => this.props.handleEvidenceClick(evidence_name)}\n                key={evidence_name}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <section className=\"observations\">\n                <h1>My observations</h1>\n                <ul className=\"observationList\">\n                    {Array.from(this.state.observed_evidence.entries())\n                        .map(this.renderEvidenceButton)}\n                </ul></section>\n        );\n    }\n}\n\nclass CandidateList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            candidate_scores: props.candidate_scores\n        }\n    }\n\n    renderGhostEntry = (value) => {\n        const name = value[0];\n        const evidence_list = value[1][\"evidence_list\"];\n        return (\n            <Ghost\n                name={name}\n                evidence_list={evidence_list}\n                key={name}\n            />\n        )\n    }\n\n    get_visible_ghosts() {\n        const ghosts = new Map();\n        for (const [ghost_name, score] of this.state.candidate_scores) {\n            if (score > 0) {\n                ghosts.set(ghost_name,\n                    {\n                        \"evidence_list\":\n                            ghost_data_map[0][ghost_name][\"evidence_list\"],\n                        \"score\": 0\n                    }\n                )\n            }\n        }\n        return ghosts;\n    }\n\n    render() {\n        if (this.get_visible_ghosts().size > 0) {\n            return (\n                <section className=\"candidates\">\n                    <h1> Possible ghosts</h1>\n                    <div className=\"candidateList\">\n                        {Array.from(this.get_visible_ghosts().entries())\n                            .map(this.renderGhostEntry)}\n                    </div></section >\n\n            );\n        } else {\n            return (\n                <section className=\"candidates\">\n                    <h1> Possible ghosts</h1>\n                    <div className=\"candidateList\">\n                        <p>No ghosts match the selected evidence.</p>\n                    </div></section >\n\n            );\n        }\n    }\n\n}\n\nclass Ghostbook extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Initialize evidence.\n        const observed_evidence = new Map();\n        Object.values(evidence).forEach((e) => {\n            observed_evidence.set(\n                e, evidence_state.NOT_SELECTED);\n        });\n\n        // Initialize ghosts.\n        const candidate_scores = new Map();\n        Object.keys(ghost_data_map[0]).forEach(\n            (k) => candidate_scores.set(k, 0));\n\n        this.state = {\n            observed_evidence: observed_evidence,\n            candidate_scores: candidate_scores\n        };\n    }\n\n    handleEvidenceClick(clicked_evidence) {\n        // TODO: I don't know why I can't make this immutable with a new Map().\n        const observed_evidence = this.state.observed_evidence;\n        const current_status = observed_evidence.get(clicked_evidence);\n        const candidate_scores = this.state.candidate_scores;\n\n        switch (current_status) {\n            case evidence_state.NOT_SELECTED:\n                observed_evidence.set(clicked_evidence,\n                    evidence_state.SELECTED);\n                break;\n\n            case evidence_state.SELECTED:\n                observed_evidence.set(clicked_evidence,\n                    evidence_state.NOT_SELECTED);\n                break;\n\n            case evidence_state.DISABLED:\n                break; // User cannot directly change if it is disabled.\n            default:\n                break;\n        }\n\n        // Recalculate candidate scores.\n        for (const ghost_name of candidate_scores.keys()) {\n            let score = 0;\n            const evidence_list =\n                Array.from(ghost_data_map[0][ghost_name]['evidence_list']);\n            for (const [evidence_name, status] of observed_evidence) {\n                if (status === evidence_state.SELECTED) {\n                    if (evidence_list.includes(evidence_name)) {\n                        score += 10;\n                    } else {\n                        score = 0;\n                        break;\n                    }\n                }\n            }\n            candidate_scores.set(ghost_name, score);\n\n            this.setState({\n                observed_evidence: observed_evidence,\n                candidate_scores: candidate_scores\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"ghostBook\" >\n                <Header />\n                <ObservationList\n                    observed_evidence={this.state.observed_evidence}\n                    handleEvidenceClick={e => this.handleEvidenceClick(e)}\n                />\n                <CandidateList\n                    candidate_scores={this.state.candidate_scores}\n                />\n            </div >\n        );\n    }\n}\n\n// === Run the app ===\nReactDOM.render(\n    <Ghostbook />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}